/**
 * @author <a href="mailto:stefanmayer13@gmail.com">Stefan Mayer</a>
 */
'use strict';

exports.__esModule = true;
exports.getUserDataRx = getUserDataRx;
exports.getUserData = getUserData;
var https = require('https');
var Rx = require('rx');
var Boom = require('boom');

function getUserDataRx(cookieBase64) {
    var _this = this;

    return Rx.Observable.create(function (observer) {
        if (!cookieBase64) {
            return observer.onError(Boom.unauthorized('Not logged in'));
        }
        var url = '/rest/auth/1/session';
        var cookie = JSON.parse(new Buffer(cookieBase64, 'base64').toString('ascii'));

        var options = {
            hostname: _this.hostname,
            port: _this.port,
            path: url,
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Cookie': cookie.join(', ')
            }
        };
        var req = https.request(options, function (res) {
            if (res.statusCode === 401) {
                return observer.onError(Boom.unauthorized('Not logged in'));
            } else if (res.statusCode !== 200) {
                return observer.onError(Boom.create(res.statusCode, res.statusMessage));
            }

            res.setEncoding('utf8');
            res.on('data', function (data) {
                observer.onNext(data);
            });
            res.on('end', function () {
                observer.onCompleted();
            });
        });

        req.on('error', function (e) {
            _this.logger.error('problem with request: ' + e.message);
            observer.onError(Boom.badGateway(e));
            observer.onCompleted();
        });

        req.end();
    }).reduce(function (prev, current) {
        return prev + current;
    }).map(function (data) {
        return JSON.parse(data);
    });
}

function getUserData(cookieBase64) {
    return this.getUserDataRx(cookieBase64).toPromise();
}